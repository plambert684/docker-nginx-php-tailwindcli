'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optionMap = exports.options = exports.description = exports.usage = undefined;
exports.run = run;

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _bytes = require('bytes');

var _bytes2 = _interopRequireDefault(_bytes);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssClean = require('postcss-clean');

var _postcssClean2 = _interopRequireDefault(_postcssClean);

var _postcssPurgecss = require('@fullhuman/postcss-purgecss');

var _postcssPurgecss2 = _interopRequireDefault(_postcssPurgecss);

var _prettyHrtime = require('pretty-hrtime');

var _prettyHrtime2 = _interopRequireDefault(_prettyHrtime);

var _tailwindcss = require('tailwindcss');

var _tailwindcss2 = _interopRequireDefault(_tailwindcss);

var _TailwindExtractor = require('../TailwindExtractor.js');

var _TailwindExtractor2 = _interopRequireDefault(_TailwindExtractor);

var _ = require('.');

var _2 = _interopRequireDefault(_);

var _emoji = require('../emoji');

var emoji = _interopRequireWildcard(_emoji);

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Core: Replace with '../..'

const usage = exports.usage = 'build <file> [options]';
const description = exports.description = 'Compiles Tailwind CSS file.';

const options = exports.options = [{
  usage: '-o, --output <file>',
  description: 'Output file.'
}, {
  usage: '-c, --config <file>',
  description: 'Tailwind config file.'
}, {
  usage: '-p, --purge <directory|file>',
  description: 'Purge unused CSS.'
}, {
  usage: '-m, --minify',
  description: 'Minify the output CSS.'
}];

const optionMap = exports.optionMap = {
  output: ['output', 'o'],
  config: ['config', 'c'],
  purge: ['purge', 'p'],
  minify: ['minify', 'm']

  /**
   * Prints the error message and stops the process.
   *
   * @param {...string} [msgs]
   */
};function stop(...msgs) {
  utils.header();
  utils.error(...msgs);
  utils.die();
}

/**
 * Prints the error message and help for this command, then stops the process.
 *
 * @param {...string} [msgs]
 */
function stopWithHelp(...msgs) {
  utils.header();
  utils.error(...msgs);
  _2.default.help.forCommand(_2.default.build);
  utils.die();
}

/**
 * Prints status of the flag.
 *
 * @param {string} label
 * @param {boolean} flag
 */
function printFlag(label, flag) {
  utils.log(' ', flag ? emoji.thumbsUp : emoji.redRing, flag ? label : _chalk2.default.dim(label));
}

/**
 * Returns all existing files. If path is a directory it is read recursivily.
 *
 * @param {array} paths
 * @return {array}
 */
function getAllFilesFromPaths(paths) {
  const files = paths.filter(utils.isFile);
  const directories = paths.filter(utils.isDir);

  return files.concat(...directories.map(utils.readDirDeep));
}

/**
 * Gets configured purgecss plugin.
 *
 * @param {array} files
 * @return {function}
 */
function getPurgecssPlugin(files) {
  return (0, _postcssPurgecss2.default)({
    content: files,
    extractors: [{
      extractor: _TailwindExtractor2.default,
      extensions: files // Apply the extractor to all content files
    }]
  });
}

/**
 * Compiles CSS file.
 *
 * @param {string} inputFile
 * @param {string} configFile
 * @param {string} outputFile
 * @param {array} plugins
 * @return {Promise}
 */
function build(inputFile, configFile, outputFile, plugins) {
  const css = utils.readFile(inputFile);

  return new Promise((resolve, reject) => {
    (0, _postcss2.default)([(0, _tailwindcss2.default)(configFile), _autoprefixer2.default].concat(plugins)).process(css, {
      from: inputFile,
      to: outputFile
    }).then(resolve).catch(reject);
  });
}

/**
 * Runs the command.
 *
 * @param {string[]} cliParams
 * @param {object} cliOptions
 * @return {Promise}
 */
function run(cliParams, cliOptions) {
  return new Promise((resolve, reject) => {
    const startTime = process.hrtime();
    const inputFile = cliParams[0];
    const configFile = cliOptions.config && cliOptions.config[0];
    const outputFile = cliOptions.output && cliOptions.output[0];
    const purgeContent = cliOptions.purge;
    const minifyFlag = !!cliOptions.minify;

    !inputFile && stopWithHelp('CSS file is required.');
    !utils.exists(inputFile) && stop(_chalk2.default.bold.magenta(inputFile), 'does not exist.');

    configFile && !utils.exists(configFile) && stop(_chalk2.default.bold.magenta(configFile), 'does not exist.');

    if (outputFile) {
      utils.header();
      utils.log();
      utils.log(emoji.go, 'Building', _chalk2.default.bold.cyan(inputFile), '...');
    }

    const contentFiles = purgeContent ? getAllFilesFromPaths(purgeContent) : [];

    if (outputFile) {
      printFlag('Purge', contentFiles.length);
      printFlag('Minify', minifyFlag);
    }

    let plugins = [];
    minifyFlag && plugins.push((0, _postcssClean2.default)());
    contentFiles.length && plugins.push(getPurgecssPlugin(contentFiles));

    build(inputFile, configFile, outputFile, plugins).then(result => {
      if (outputFile) {
        utils.writeFile(outputFile, result.css);

        const prettyTime = (0, _prettyHrtime2.default)(process.hrtime(startTime));

        utils.log();
        utils.log(emoji.yes, 'Finished in', _chalk2.default.bold.magenta(prettyTime));
        utils.log(emoji.pack, 'Size:', _chalk2.default.bold.magenta((0, _bytes2.default)(result.css.length)));
        utils.log(emoji.disk, 'Saved to', _chalk2.default.bold.cyan(outputFile));
        utils.footer();
      } else {
        process.stdout.write(result.css);
      }
    }).then(resolve).catch(reject);
  });
}